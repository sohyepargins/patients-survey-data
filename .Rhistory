sigma.vec=numeric(1000)
for(r in 1:1000){
x1<-mvrnorm(1000, 0, cbind(c(1, 0.6),c(0.6,1)))
x2<-mvrnorm(1000, 0, cbind(c(1, 0.6),c(0.6,1)))
e<-rt(1000, df=3)
y=1+1*x1+1*x2+(0.3)*e
#computation w/ simulated data
fit =lm(y~x1+x2)
coef.matrix[r,]=coef(fit)
sigma.vec[r]=sigma(fit)/sqrt(3)
}
set.seed(123)
n<-1000
coef.matrix=matrix(0,1000,3)
sigma.vec=numeric(1000)
for(r in 1:1000){
x1<-mvrnorm(1000, 0, Sigma=cbind(c(1, 0.6),c(0.6,1)))
x2<-mvrnorm(1000, 0, Sigma=cbind(c(1, 0.6),c(0.6,1)))
e<-rt(1000, df=3)
y=1+1*x1+1*x2+(0.3)*e
#computation w/ simulated data
fit =lm(y~x1+x2)
coef.matrix[r,]=coef(fit)
sigma.vec[r]=sigma(fit)/sqrt(3)
}
set.seed(123)
n<-1000
coef.matrix=matrix(0,1000,3)
sigma.vec=numeric(1000)
for(r in 1:1000){
Sigma<-matrix(c(1,0.6,0.6,1),2,2)
x1<-mvrnorm(1000, 0, Sigma=cbind(c(1, 0.6),c(0.6,1)))
x2<-mvrnorm(1000, 0, Sigma=cbind(c(1, 0.6),c(0.6,1)))
e<-rt(1000, df=3)
y=1+1*x1+1*x2+(0.3)*e
#computation w/ simulated data
fit =lm(y~x1+x2)
coef.matrix[r,]=coef(fit)
sigma.vec[r]=sigma(fit)/sqrt(3)
}
set.seed(123)
n<-1000
coef.matrix=matrix(0,1000,3)
sigma.vec=numeric(1000)
for(r in 1:1000){
Sigma<-matrix(c(1,0.6,0.6,1),2,2)
x1<-mvrnorm(1000, 0, Sigma)
x2<-mvrnorm(1000, 0, Sigma)
e<-rt(1000, df=3)
y=1+1*x1+1*x2+(0.3)*e
#computation w/ simulated data
fit =lm(y~x1+x2)
coef.matrix[r,]=coef(fit)
sigma.vec[r]=sigma(fit)/sqrt(3)
}
set.seed(123)
n<-1000
coef.matrix=matrix(0,1000,3)
sigma.vec=numeric(1000)
for(r in 1:1000){
Sigma<-matrix(c(1,0.6,0.6,1),2,2)
x1<-mvrnorm(1000, mu=c(0,0), Sigma)
x2<-mvrnorm(1000, mu=c(0,0), Sigma)
e<-rt(1000, df=3)
y=1+1*x1+1*x2+(0.3)*e
#computation w/ simulated data
fit =lm(y~x1+x2)
coef.matrix[r,]=coef(fit)
sigma.vec[r]=sigma(fit)/sqrt(3)
}
set.seed(123)
coef.matrix=matrix(0,1000,3)
sigma.vec=numeric(1000)
for(r in 1:1000){
sigma<-matrix(c(1,0.6,0.6,1),2,2)
x1<-mvrnorm(1000, mu=rep(0,0), Sigma=sigma)
x2<-mvrnorm(1000, mu=rep(0,0), Sigma=sigma)
e<-rt(1000, df=3)
y=1+1*x1+1*x2+(0.3)*e
#computation w/ simulated data
fit =lm(y~x1+x2)
coef.matrix[r,]=coef(fit)
sigma.vec[r]=sigma(fit)/sqrt(3)
}
library(MASS)
library(mvtnorm)
set.seed(123)
coef.matrix=matrix(0,1000,3)
sigma.vec=numeric(1000)
for(r in 1:1000){
mu <- c(0,0)
sigma<-matrix(c(1,0.6,0.6,1),2)
x1<-mvrnorm(1000, mu = mu, Sigma = sigma)
x2<-mvrnorm(1000, mu = mu, Sigma = sigma)
e<-rt(1000, df=3)
y=1+1*x1+1*x2+(0.3)*e
#computation w/ simulated data
fit =lm(y~x1+x2)
coef.matrix[r,]=coef(fit)
sigma.vec[r]=sigma(fit)/sqrt(3)
}
set.seed(123)
coef.matrix=matrix(0,1000,3)
sigma.vec=numeric(1000)
for(r in 1:1000){
x1<-mvrnorm(1000, 0, 1)
x2<-mvrnorm(1000, 0, 1)
e<-rt(1000, df=3)
y=1+1*x1+1*x2+(0.3)*e
#computation w/ simulated data
fit =lm(y~x1+x2)
coef.matrix[r,]=coef(fit)
sigma.vec[r]=sigma(fit)/sqrt(3)
}
hist(coef.matrix[,2], main=bquote(The ~ Distribution ~ of ~ 1000 ~ beta[2] ~Estimates),
xlab=bquote(hat(beta)[2]))
hist((sigma.vec)^2)
library(MASS)
library(mvtnorm)
set.seed(123)
coef.matrix=matrix(0,1000,3)
sigma.vec=numeric(1000)
for(i in 1:1000){
X<-rmvnorm(n, c(0,0),sigma=cbind(c(1, 0.6),c(0.6,1)))
e<-rt(1000, df=3)
Y<-1+1*X[,1]+1*X[,2]+(0.3)*e
fit=lm(y~X[,1]+X[,2])
coef.matrix[i,]=coef(fit)
sigma.vec[i]=sigma(fit)/sqrt(3)
}
hist(coef.matrix[,1])
coef
coefs1
set.seed(123)
coef.matrix=matrix(0,1000,3)
sigma.vec=numeric(1000)
for(i in 1:1000){
X<-rmvnorm(n, c(0,0),sigma=cbind(c(1, 0.6),c(0.6,1)))
e<-rt(1000, df=3)
Y<-1+1*X[,1]+1*X[,2]+(0.3)*e
fit=lm(y~X[,1]+X[,2])
coef.matrix[i,]=coef(fit)
coefs1[i,]=coef(fit)
sigma.vec[i]=sigma(fit)/sqrt(3)
}
coefs1
hist(coefs1[,1], main=bquote(The ~ Distribution ~ of ~ 1000 ~ beta[0] ~Estimates),
xlab=bquote(hat(beta)[0]), freq=F)
hist((sigma.vec)^2, main=bquote(The ~ Distribution ~ of ~ 1000 ~ sigma[e]^2 ~Estimates),
xlab=bquote(hat(sigma)[e]), freq=F)
hist(coefs1[,2], main=bquote(The ~ Distribution ~ of ~ 1000 ~ beta[1] ~Estimates),
xlab=bquote(hat(beta)[1]), freq=F)
hist(coefs1[,1], main=bquote(The ~ Distribution ~ of ~ 1000 ~ beta[0] ~Estimates),
xlab=bquote(hat(beta)[0]), freq=F)
dat<-cbind(coefs1,(sigma.vec)^2)
pairs(dat)
var.vec<-(sigma.vec)^2
names(var.vec)<-c("sigma^2")
dat<-cbind(coefs1,var.vec)
pairs(dat)
cor(coefs1[,1], coefs1[,2]) #b0 and b1
cor(coefs1[,1], var.vec) #b0 and sigma
cor(coefs1[,2], var.vec) #b1 an
cor(coefs1[,1], coefs1[,2], method="pearson") #b0 and b1
cor.test(coefs1[,1], coefs1[,2], method="pearson") #b0 and b1
cor.test(coefs1[,1], var.vec) #b0 and sigma
cor.test(coefs1[,2], var.vec) #b1 and sigma
library(MASS)
library(mvtnorm)
set.seed(123)
coef.matrix=matrix(0,1000,3)
sigma.vec=numeric(1000)
mu<- c(0, 0)
sigma <- matrix(c(1,0.6,0.6,1),2,2)
for(r in 1:1000){
x1<-mvrnorm(1000, mu, Sigma=sigma)
x2<-mvrnorm(1000, mu, Sigma=sigma)
e<-rt(1000, df=3)
y=1+1*x1+1*x2+(0.3)*e
#computation w/ simulated data
fit =lm(y~x1+x2)
coef.matrix[r,]=coef(fit)
sigma.vec[r]=sigma(fit)/sqrt(3)
}
set.seed(123)
coef.matrix=matrix(0,1000,3)
sigma.vec=numeric(1000)
mu<- c(0, 0)
sigma <- matrix(c(1,0.6,0.6,1),2,2)
for(r in 1:1000){
X<-mvrnorm(1000, mu, Sigma=sigma)
e<-rt(1000, df=3)
y=1+1*X[,1]+1*X[,2]+(0.3)*e
#computation w/ simulated data
fit =lm(y~X[,1]+X[,2])
coef.matrix[r,]=coef(fit)
sigma.vec[r]=sigma(fit)/sqrt(3)
}
for(r in 1:1000){
X<-mvrnorm(1000, mu, Sigma=sigma)
stop()
e<-rt(1000, df=3)
y=1+1*X[,1]+1*X[,2]+(0.3)*e
#computation w/ simulated data
fit =lm(y~X[,1]+X[,2])
coef.matrix[r,]=coef(fit)
sigma.vec[r]=sigma(fit)/sqrt(3)
}
X
for(r in 1:1000){
X<-mvrnorm(1000, mu, Sigma=sigma)
e<-rt(1000, df=3)
stop()
y=1+1*X[,1]+1*X[,2]+(0.3)*e
#computation w/ simulated data
fit =lm(y~X[,1]+X[,2])
coef.matrix[r,]=coef(fit)
sigma.vec[r]=sigma(fit)/sqrt(3)
}
e
setwd("/Users/sohyepark/Rfiles/rfiles>edms787")
setwd("/Users/sohyepark/Rfiles/rfiles>edms787")
dat <- read.csv("logistic.csv")
setwd("/Users/sohyepark/Rfiles/rfiles>edms787")
setwd("/Users/sohyepark/Rfiles/rfiles>edms787")
require(mirt)
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
setwd("~/Rfiles")
pcs <- read.csv("sf12pcs.csv", header=T)
pcs <- read.csv("sf12pcs.csv", header=T)
setwd("~/Rfiles")
require(mirt)
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
setwd("/Users/sohyepark/Rfiles/rfiles/capstone")
pcs <- read.csv("sf12pcs.csv", header=T)
mcs<-read.csv("sf12mcs.csv", header =T)
mod.pcs1<-mdirt(pcs, 1)
#LCM: 2 classes
mod.pcs2<-mdirt(pcs, 2)
summary(mod.pcs2)
plot(mod.pcs2)
plot(mod.pcs2, profile=TRUE)
mod.pcs3<-mdirt(pcs, 3)
mod.pcs3
summary(mod.pcs3)
plot(mod.pcs3)
plot(mod.pcs3, profile = TRUE)
anova(mod.pcs2, mod.pcs1)
anova(mod.pcs2, mod.pcs3)
fs.pcs3<-fscores(mod.pcs3)
head(fs.pcs3)
classes.pcs3<-1:3
class_max.pcs3<-classes.pcs3[apply(apply(fs.pcs3,1,max)==fs.pcs3, 1,which)]
table(class_max.pcs3)
itemfit(mod3)
table(class_max.pcs3)
coef(mod3,simplify=TRUE)
table(class_max.pcs3)
dat <- read.csv("sf12.csv", header=T)
head(dat)
dat <- read.csv("sf12.csv", header=T)
head(dat)
dat <- read.csv("sf12.csv", header=T)
dat$pcs_group<-as.factor(dat$pcs_group)
dat$employ2<-as.factor(dat$employ2)
dat$marital2<-as.factor(dat$marital2)
dat$edu2<-as.factor(dat$edu2)
dat$famhx<-as.factor(dat$famhx)
dat$depress2<-as.factor(dat$depress2)
dat$pcs_group <- relevel(dat$pcs_group, ref = "3")
mlr.pcs<-multinom(pcs_group~Age+Gender+employ2+marital2+edu2+famhx+years_dgx, data = dat)
summary(mlr.pcs)
z.pcs <- summary(mlr.pcs)$coefficients/summary(mlr.pcs)$standard.errors
z.pcs
p.pcs <- (1 - pnorm(abs(z.pcs), 0, 1)) * 2
p.pcs
exp(coef(mlr.pcs)) #odds ratio
head(pp.pcs<-fitted(mlr.pcs))
require(mirt)
setwd("~/Rfiles")
pcs <- read.csv("sf12pcs.csv", header=T)
setwd("~/capstone")
setwd("~/Rfiles/rfiles/captstone")
setwd("~/Rfiles/rfiles/capstone")
setwd("~/Rfiles/rfiles/captstone")
pcs <- read.csv("sf12pcs.csv", header=T)
mcs<-read.csv("sf12mcs.csv", header =T)
mod.pcs1<-mdirt(pcs, 1)
mod.pcs2<-mdirt(pcs, 2)
summary(mod.pcs2)
plot(mod.pcs2)
plot(mod.pcs2, profile=TRUE)
mod.pcs3<-mdirt(pcs, 3)
mod.pcs3
summary(mod.pcs3)
plot(mod.pcs3)
plot(mod.pcs3, profile = TRUE)
fs.pcs3<-fscores(mod.pcs3)
head(fs.pcs3)
classes.pcs3<-1:3
class_max.pcs3<-classes.pcs3[apply(apply(fs.pcs3,1,max)==fs.pcs3, 1,which)]
table(class_max.pcs3)
itemfit(mod3)
table(class_max.mod.pcs3)
mod.mcs1<-mdirt(mcs, 1)
mod.mcs2<-mdirt(mcs, 2)
# summary(mod.mcs2)
fs.mcs2<-fscores(mod.mcs2)
classes.mcs2<-1:2
class_max.mcs2<-classes.mcs2[apply(apply(fs.mcs2,1,max)==fs.mcs2, 1,which)]
table(class_max.mcs2)
mod.mcs3<-mdirt(mcs, 3)
fs.mcs3<-fscores(mod.mcs3)
classes.mcs3<-1:3
class_max.mcs3<-classes.mcs3[apply(apply(fs.mcs3,1,max)==fs.mcs3, 1,which)]
class_max.mcs3
table(class_max.mcs3)
getwd()
fs.mcs3<-fscores(mod.mcs3)
classes.mcs3<-1:3
class_max.mcs3<-classes.mcs3[apply(apply(fs.mcs3,1,max)==fs.mcs3, 1,which)]
class_max.mcs3
table(class_max.mcs3)
anova(mod.mcs1, mod.mcs2)
anova(mod.mcs2, mod.mcs3)
mcs.grouping<-cbind(class_max.mcs3)
write.csv(mcs.grouping,"/Users/sohyepark/Rfiles/rfiles/capstone/sf12mcs.csv", row.names = FALSE)
pcs.grouping<-cbind(class_max.pcs3)
write.csv(pcs.grouping,"/Users/sohyepark/Rfiles/rfiles/capstone/sf12pcs.csv", row.names = FALSE)
library(polycor)
library(fastmap)
library(lavaan)
library(lavaanPlot)
setwd("/Users/sohyepark/Rfiles/rfiles/capstone/chb-irt-efa-cfa")
dat <- read.csv("niddkcfa.csv", header=T)
dat$Language<-as.factor(dat$Language)#3
dat$Gender<-as.factor(dat$Gender)#5
dat$Site<-as.factor(dat$Site)#2
head(dat)
rasi<-dat[,c(7:21)]
sf<-dat[,c(22:33)]
phq<-dat[,c(47:55)]
stig<-dat[,c(56:61)]
covid<-dat[,c(63:69)]
#Data with merged categories
datm <- read.csv("niddkm.csv", header=T)
#Subsetting data + language variable
rasim<-datm[,c(3,7:21)]
sfm<-datm[,c(3,22:33)]
phqm<-datm[,c(3,47:55)]
covidm<-datm[,c(3,63:69)]
rasi<-dat[,c(7:21)]
#RASI
cfa.5.rasi<-'
WORK= ~NA*rasi1+rasi2+rasi3
LANG= ~NA*rasi4+rasi5+rasi6
REL = ~NA*rasi7+rasi8+rasi9
DISC = ~NA*rasi10+rasi11+rasi12
ISOL = ~NA*rasi13+rasi14+rasi15
WORK ~~1*WORK
LANG ~~1*LANG
REL ~~1*REL
DISC ~~1*DISC
ISOL ~~1*ISOL'
rasi.5.fit<-cfa(cfa.5.rasi, data=rasi, ordered=TRUE)
summary(rasi.5.fit, fit.measures=TRUE)
modindices(rasi.5.fit, minimum.value = 10, sort = TRUE)
#plot
labels=list(WORK = "Work Challenges",LANG = "Language Skills",
REL = "Intercultural relations", DISC = "Discrimination",
ISOL = "Cultural Isolation")
lavaanPlot(model = rasi.5.fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"),
edge_options = list(color = "grey"), coefs = TRUE, covs = TRUE, stars="covs")
rasi<-dat[,c(3,7:21)]
cfa.rasi.mg<-'
WORK= ~NA*rasi1+rasi2+rasi3
LANG= ~NA*rasi4+rasi5+rasi6
REL = ~NA*rasi7+rasi8+rasi9
DISC = ~NA*rasi10+rasi11+rasi12
ISOL = ~NA*rasi13+rasi14+rasi15
WORK ~~1*WORK
LANG ~~1*LANG
REL ~~1*REL
DISC ~~1*DISC
ISOL ~~1*ISOL'
rasi.mg.sep<-cfa(cfa.rasi.mg, data=rasi, ordered=TRUE, group="Language")
rasi.mg.sep<-cfa(cfa.rasi.mg, data=rasim, ordered=TRUE, group="Language")
summary(rasi.mg.sep, fit.measures=TRUE) #did not work due to empty cells
## Multiple groups (merged categories): Full invariance (Same loadings)
rasi.mg.fi<-cfa(cfa.rasi.mg, data=rasim, ordered=TRUE, group="Language", group.equal="loadings")
summary(rasi.mg.fi, fit.measures=TRUE)
#Model comparison
lavTestLRT(rasi.mg.sep, rasi.mg.fi)
sf<-dat[,c(22:33)]
cov(sf)
#2-factor cfa model
cfa.2.sf<-'
PCS= ~NA*sf1+sf2+sf3+sf4+sf5+sf8
MCS= ~NA*sf6+sf7+sf9+sf10+sf11+sf12
PCS ~~1*PCS
MCS ~~1*MCS
'
sf.2.fit<-cfa(cfa.2.sf, data=sf, ordered=TRUE)
summary(cfa.sf.fit, fit.measures = T, standardized = T)
sf<-dat[,c(22:33)]
cov(sf)
#2-factor cfa model
cfa.2.sf<-'
PCS= ~NA*sf1+sf2+sf3+sf4+sf5+sf8
MCS= ~NA*sf6+sf7+sf9+sf10+sf11+sf12
PCS ~~1*PCS
MCS ~~1*MCS
'
sf.2.fit<-cfa(cfa.2.sf, data=sf, ordered=TRUE)
summary(cfa.sf.fit, fit.measures = T, standardized = T)
sf12.mg<-'
PCS= ~NA*sf1+sf2+sf3+sf4+sf5+sf8
MCS= ~NA*sf6+sf7+sf9+sf10+sf11+sf12
PCS ~~1*PCS
MCS ~~1*MCS'
sf.mg.sep<-cfa(sf12.mg, data=sfm, ordered=TRUE, group="Language")
summary(sf.mg.sep, fit.measures=TRUE) #did not work due to empty cells
## Multiple groups (merged categories): Full invariance (same loadings)
sf.mg.fi<-cfa(sf12.mg, data=sfm, ordered=TRUE, group="Language", group.equal="loadings")
summary(sf.mg.fi, fit.measures=TRUE)
#Model comparison
lavTestLRT(sf.mg.sep, sf.mg.fi)
cfa.1.phq<-'
DEPRESSION= ~NA*phq1+phq2+phq3+phq4+phq5+phq6+phq7+phq8+phq9
DEPRESSION ~~1*DEPRESSION'
phq.1.fit<-cfa(cfa.1.phq, data=phq, ordered=TRUE)
summary(phq.1.fit, fit.measures = T, standardized = T)
#plot
labels=list(DEPRESSION = "Depression")
lavaanPlot(model = phq.1.fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"),
edge_options = list(color = "grey"), coefs = TRUE, covs = TRUE, stars="covs")
#2-factor model
cfa.2.phq<-'
COG= ~NA*phq1+phq2+phq6+phq7+phq8+phq9
SOM = ~NA*phq3+phq4+phq5
COG ~~1*COG
SOM ~~1*SOM'
phq.2.fit<-cfa(cfa.2.phq, data=phq, ordered=TRUE)
summary(phq.2.fit, fit.measures = T, standardized = T)
#plot
labels=list(COG = "Cognitive-Affective", SOM = "Somatic")
lavaanPlot(model = phq.2.fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"),
edge_options = list(color = "grey"), coefs = TRUE, covs = TRUE, stars="covs")
cfa.2.sf<-'
PCS= ~NA*sf1+sf2+sf3+sf4+sf5+sf8
MCS= ~NA*sf6+sf7+sf9+sf10+sf11+sf12
PCS ~~1*PCS
MCS ~~1*MCS
'
sf.2.fit<-cfa(cfa.2.sf, data=sf, ordered=TRUE)
summary(cfa.sf.fit, fit.measures = T, standardized = T)
cfa.stig<-'
STIG= ~NA*stig1+stig2+stig3+stig4+stig5+stig6
STIG ~~1*STIG'
stig.fit<-cfa(cfa.stig, data=stig, ordered=TRUE)
summary(stig.fit, fit.measures = T, standardized = T)
#plot
labels=list(STIG = "HepB Stigma")
lavaanPlot(model = stig.fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"),
edge_options = list(color = "grey"), coefs = TRUE, covs = TRUE, stars="covs")
#::::: Multiple group Analysis:::::#
stigm<-dat[,c(3,56:61)]
stig.mg<-'
STIG= ~NA*stig1+stig2+stig3+stig4+stig5+stig6
STIG ~~1*STIG'
## Multiple groups (merged categories): Separate calibration (Configural)
stig.mg.sep<-cfa(stig.mg, data=stigm, ordered=TRUE, group="Language")
summary(phq.mg.sep, fit.measures=TRUE) #did not work due to empty cells
#::::: Multiple group Analysis:::::#
stigm<-dat[,c(3,56:61)]
stig.mg<-'
STIG= ~NA*stig1+stig2+stig3+stig4+stig5+stig6
STIG ~~1*STIG'
stig.mg.sep<-cfa(stig.mg, data=stigm, ordered=TRUE, group="Language")
summary(phq.mg.sep, fit.measures=TRUE) #did not work due to empty cells
stig.mg.fi<-cfa(stig.mg, data=stigm, ordered=TRUE, group="Language", group.equal="loadings")
summary(stig.mg.fi, fit.measures=TRUE)
covid.all<-dat[,c(3,63:69)]
head(covid.all)
covid2<-covid
library(psych)
covid.cor<-mixedCor(covid2, c=NULL, p=1:7) #Polychoric correations
covid.poly<-covid.cor$rho #extract polychoric correlations
covid.poly
scree(covid.poly)
library(EFA.dimensions)
MAP(covid, corkind='polychoric', verbose=T) #Velicer's MAP test to decide the factor
setwd("//Users/sohyepark/Rfiles/rfiles/capstone/chb-irt-efa-cfa")
covidE <- read.csv("covidE.csv", header=T)
covidK <- read.csv("covidK.csv", header=T)
covid.corE<-mixedCor(covidE, c=NULL, p=1:7) #Polychoric correations for Eng group
covid.polyE<-covid.corE$rho
covid.corK<-mixedCor(covidK, c=NULL, p=1:7) #Polychoric correations for Kor group
covid.polyK<-covid.corK$rho
(covid.paf.1 <- fa(covid.poly, n.obs = 255, cor="poly", nfactors = 1, rotate = 'none', fm ='pa', SMC = T, max.iter=500) )
(covid.paf.2 <- fa(covid.poly, n.obs = 255, cor="poly", nfactors = 2, rotate = 'none', fm = 'pa', SMC = T, max.iter=500) )
covid.paf.2$loadings
corrplot(covid.paf.2$loadings, is.corr=T)
require(mirt)
setwd("/Users/sohyepark/Rfiles/rfiles/capstone/chb-patients-survey")
setwd("/Users/sohyepark/Rfiles/rfiles/capstone/chb-patients-survey")
